generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("KUN_DATABASE_URL")
}

// role: 1 - user, 2 - publisher, 3 - admin, 4 - super admin
model user {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(17)
  email         String   @unique @db.VarChar(1007)
  password      String   @db.VarChar(1007)
  ip            String   @default("") @db.VarChar(233)
  avatar        String   @default("") @db.VarChar(233)
  role          Int      @default(1)
  status        Int      @default(0)
  register_time DateTime @default(now())
  moemoepoint   Int      @default(0)
  bio           String   @default("") @db.VarChar(107)

  daily_image_count Int    @default(0)
  daily_check_in    Int    @default(0)
  daily_upload_size Float  @default(0)
  last_login_time   String @default("")

  admin_log admin_log[]
  patch_tag patch_tag[]

  patch_favorite      user_patch_favorite_relation[]
  patch_contribute    user_patch_contribute_relation[]
  patch_comment_like  user_patch_comment_like_relation[]
  patch_resource_like user_patch_resource_like_relation[]

  following          user_follow_relation[] @relation("user_following")
  follower           user_follow_relation[] @relation("user_follower")
  patch              patch[]                @relation("user_patch")
  patch_comment      patch_comment[]        @relation("user_patch_comment")
  patch_resource     patch_resource[]       @relation("user_patch_resource")
  patch_history      patch_history[]        @relation("user_patch_history")
  patch_pull_request patch_pull_request[]   @relation("user_patch_pull_request")
  send_message       user_message[]         @relation("user_send_message")
  receive_message    user_message[]         @relation("user_receive_message")

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model admin_log {
  id      Int    @id @default(autoincrement())
  type    String
  content String @db.VarChar(10007)
  status  Int    @default(0)

  user_id Int
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model user_follow_relation {
  id Int @id @default(autoincrement())

  follower_id  Int
  following_id Int

  follower  user @relation("user_follower", fields: [follower_id], references: [id])
  following user @relation("user_following", fields: [following_id], references: [id])

  @@unique([follower_id, following_id])
}

// status: 0 - unread, 1 - read, 2 - approve, 3 - decline
model user_message {
  id      Int    @id @default(autoincrement())
  type    String
  content String @db.VarChar(10007)
  status  Int    @default(0)

  sender_id    Int?
  sender       user? @relation("user_send_message", fields: [sender_id], references: [id])
  recipient_id Int?
  recipient    user? @relation("user_receive_message", fields: [recipient_id], references: [id])

  patch_id          Int @default(0)
  patch_resource_id Int @default(0)
  comment_id        Int @default(0)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model user_patch_favorite_relation {
  id Int @id @default(autoincrement())

  user_id  Int
  user     user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  patch_id Int
  patch    patch @relation(fields: [patch_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, patch_id])
}

model user_patch_contribute_relation {
  id Int @id @default(autoincrement())

  user_id  Int
  user     user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  patch_id Int
  patch    patch @relation(fields: [patch_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, patch_id])
}

model user_patch_comment_like_relation {
  id Int @id @default(autoincrement())

  user_id    Int
  user       user          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment_id Int
  comment    patch_comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, comment_id])
}

model user_patch_resource_like_relation {
  id Int @id @default(autoincrement())

  user_id     Int
  user        user           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  resource_id Int
  resource    patch_resource @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, resource_id])
}

model patch {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(1007)
  vndb_id      String?  @unique @db.VarChar(107)
  banner       String   @default("") @db.VarChar(1007)
  introduction String   @default("") @db.VarChar(100007)
  released     String   @default("") @db.VarChar(107)
  status       Int      @default(0)
  download     Int      @default(0)
  view         Int      @default(0)
  type         String[]
  alias        String[]
  language     String[]
  engine       String[]
  platform     String[]

  company patch_company_relation[]
  tag     patch_tag_relation[]

  user_id Int
  user    user @relation("user_patch", fields: [user_id], references: [id])

  favorite_by   user_patch_favorite_relation[]
  contribute_by user_patch_contribute_relation[]

  resource patch_resource[]     @relation("patch_resource")
  comment  patch_comment[]      @relation("patch_comment")
  history  patch_history[]      @relation("patch_history")
  pr       patch_pull_request[] @relation("patch_pull_request")

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model patch_tag {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(107)
  introduction String   @default("") @db.VarChar(10007)
  count        Int      @default(0)
  alias        String[]

  patch_relation patch_tag_relation[]
  user_id        Int
  user           user                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model patch_tag_relation {
  id       Int       @id @default(autoincrement())
  patch_id Int
  patch    patch     @relation(fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag_id   Int
  tag      patch_tag @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([patch_id, tag_id])
}

model patch_company {
  id Int @id @default(autoincrement())

  name             String   @db.VarChar(107)
  primary_language String[]
  official_website String[]
  parent_brand     String[]
  alias            String[]

  patch_relations patch_company_relation[]
  created         DateTime                 @default(now())
  updated         DateTime                 @updatedAt
}

model patch_company_relation {
  id Int @id @default(autoincrement())

  patch_id   Int
  patch      patch         @relation(fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  company_id Int
  company    patch_company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([patch_id, company_id])
}

model patch_resource {
  id       Int      @id @default(autoincrement())
  storage  String
  size     String   @default("") @db.VarChar(107)
  code     String   @default("") @db.VarChar(1007)
  password String   @default("") @db.VarChar(1007)
  note     String   @default("") @db.VarChar(1007)
  hash     String   @default("")
  content  String   @default("")
  type     String[]
  language String[]
  platform String[]
  download Int      @default(0)
  status   Int      @default(0)

  like_by user_patch_resource_like_relation[]

  user_id  Int
  user     user  @relation("user_patch_resource", fields: [user_id], references: [id])
  patch_id Int
  patch    patch @relation("patch_resource", fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model patch_history {
  id      Int    @id @default(autoincrement())
  action  String @default("")
  type    String @default("")
  content String @default("") @db.VarChar(10007)

  user_id  Int
  user     user  @relation("user_patch_history", fields: [user_id], references: [id])
  patch_id Int
  patch    patch @relation("patch_history", fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

// status: 0 - pending, 1 - merged, 2 - declined
model patch_pull_request {
  id            Int    @id @default(autoincrement())
  status        Int    @default(0)
  index         Int    @default(0)
  complete_time String @default("")
  diff_content  String @default("") @db.VarChar(100007)
  content       String @default("") @db.VarChar(100007)
  note          String @default("") @db.VarChar(1007)

  user_id  Int
  user     user  @relation("user_patch_pull_request", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patch_id Int
  patch    patch @relation("patch_pull_request", fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model patch_comment {
  id      Int    @id @default(autoincrement())
  content String @default("") @db.VarChar(10007)
  edit    String @default("")

  like_by user_patch_comment_like_relation[]

  reply     patch_comment[] @relation("comment_reply")
  parent_id Int?
  parent    patch_comment?  @relation("comment_reply", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_id   Int
  user      user            @relation("user_patch_comment", fields: [user_id], references: [id])
  patch_id  Int
  patch     patch           @relation("patch_comment", fields: [patch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt
}
