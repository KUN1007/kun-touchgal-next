// role: 1 - user, 2 - publisher, 3 - admin, 4 - super admin
model user {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(17)
  email         String   @unique @db.VarChar(1007)
  password      String   @db.VarChar(1007)
  ip            String   @default("") @db.VarChar(233)
  avatar        String   @default("") @db.VarChar(233)
  role          Int      @default(1)
  status        Int      @default(0)
  register_time DateTime @default(now())
  moemoepoint   Int      @default(0)
  bio           String   @default("") @db.VarChar(107)

  enable_email_notice Boolean @default(true)
  daily_image_count   Int     @default(0)
  daily_check_in      Int     @default(0)
  daily_upload_size   Float   @default(0)
  last_login_time     String  @default("")

  enable_2fa        Boolean  @default(false)
  two_factor_secret String   @default("")
  two_factor_backup String[] @default([])

  admin_log admin_log[]
  patch_tag patch_tag[]

  patch_comment_like    user_patch_comment_like_relation[]
  patch_resource_like   user_patch_resource_like_relation[]
  patch_favorite_folder user_patch_favorite_folder[]

  following       user_follow_relation[] @relation("user_following")
  follower        user_follow_relation[] @relation("user_follower")
  patch           patch[]                @relation("user_patch")
  patch_comment   patch_comment[]        @relation("user_patch_comment")
  patch_resource  patch_resource[]       @relation("user_patch_resource")
  send_message    user_message[]         @relation("user_send_message")
  receive_message user_message[]         @relation("user_receive_message")

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model user_follow_relation {
  id Int @id @default(autoincrement())

  follower_id  Int
  following_id Int

  follower  user @relation("user_follower", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  following user @relation("user_following", fields: [following_id], references: [id])

  @@unique([follower_id, following_id])
}

// status: 0 - unread, 1 - read, 2 - approve, 3 - decline
model user_message {
  id      Int    @id @default(autoincrement())
  type    String
  content String @db.VarChar(10007)
  status  Int    @default(0)
  link    String @default("") @db.VarChar(1007)

  sender_id    Int?
  sender       user? @relation("user_send_message", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient_id Int?
  recipient    user? @relation("user_receive_message", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model user_patch_favorite_folder {
  id          Int                                   @id @default(autoincrement())
  name        String                                @db.VarChar(100)
  description String                                @default("") @db.VarChar(500)
  is_public   Boolean                               @default(false)
  user_id     Int
  user        user                                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  patch       user_patch_favorite_folder_relation[]
  created     DateTime                              @default(now())
  updated     DateTime                              @updatedAt

  @@unique([user_id, name])
}

model user_patch_favorite_folder_relation {
  id        Int                        @id @default(autoincrement())
  folder_id Int
  patch_id  Int
  folder    user_patch_favorite_folder @relation(fields: [folder_id], references: [id], onDelete: Cascade)
  patch     patch                      @relation(fields: [patch_id], references: [id], onDelete: Cascade)
  created   DateTime                   @default(now())
  updated   DateTime                   @updatedAt

  @@unique([folder_id, patch_id])
}
